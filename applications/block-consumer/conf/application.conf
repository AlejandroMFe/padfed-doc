# DB 
# Oracle
# url      => jdbc:oracle:thin:@//<host>:<port>/<service_name>
db.hlf.url = "jdbc:oracle:thin:@xxx.xxx.xxx.xxx:1521:blchain"
# Postgres
# url        => jdbc:postgresql://host:port/database
# db.hlf.url = "jdbc:postgresql://localhost:5432/hlf_db"

# Usuario con que se conecta la aplicacion
db.hlf.user = bc_app
db.hlf.password = ????

# hikari https://github.com/brettwooldridge/HikariCP
db.hlf.hikari.maximumPoolSize = 1
db.hlf.hikari.connectionTimeout = 60000

# Nombre del schema donde estan creadas las tablas (owner)
db_hlf.schema = hlf

# Nombre de la package que recibe las invocaciones desde la aplicacion. 
# Para Postgres debe quedar seteado con "".
db_hlf.package = bc_pkg
#db_hlf.package = ""

# Puerto para monitoreo
application.port = 8084

# FABRIC conf
# Nombre del peer preferido
fabric.preferred.peer = peer0.xxx.com

# Regexp para filtrar nombres de peers alternativos al preferido
# Cuando el preferido no responde o esta mas atrasado que fabric.switch.blocks.threshold
# Block-Consumer swithea a algun peer alternativo cuyo nombre 
# matchee con esta regexp
fabric.switch.peers.regexp = ".*"
fabric.switch.blocks.threshold = 10

# Nombre del channel 
fabric.channel = padfedchannel
# Archivo de configuracion con la descripcion de la Blockchain 
fabric.yaml.conf = /conf/fabric.client.yaml

# fabric.auth.type = fs: indica que block-consumer se va a autenticar con un certificado y una pk de MSP residente en el file system.
# El certificado debe ser emitido por la CA para MSP de la organizacion indicada en el archivo de configuracion ${fabric.yaml.conf} en client: organization:
fabric.auth.type = fs
fabric.auth.appuser.name = block-consumer
# Clave Privada para MSP
fabric.auth.appuser.keystore.path = /conf/msp/userN.orgX.msp-pk.pem
# Certificado para MSP
fabric.auth.appuser.certsign.path = /conf/msp/userN.orgX.msp-cert.pem

#fabric.tls.auth.appuser.keystore.path = /conf/store/local/orgX/UserX.OrgX.tls-pk.pem
#fabric.tls.auth.appuser.certsign.path = /conf/store/local/orgX/UserX.OrgX.tls-cert.pem

certificate.check.restrict = false

databases {
  #################################
  # oracle
  #################################
  oracle {
    dataSourceClassName = oracle.jdbc.pool.OracleDataSource
    connectionTestQuery = SELECT 1 FROM DUAL
  }

  #################################
  # postgresql
  #################################
  postgresql {
    dataSourceClassName = org.postgresql.ds.PGSimpleDataSource
    connectionTestQuery = SELECT 1
  }
}

fabric {
  netty {
    grpc {
      //keyAliveTime in Minutes
      NettyChannelBuilderOption.keepAliveTime="5"
      //keepAliveTimeout in Seconds
      NettyChannelBuilderOption.keepAliveTimeout="8"
      NettyChannelBuilderOption.keepAliveWithoutCalls="true"
      //maxInboundMessageSize in bytes
      NettyChannelBuilderOption.maxInboundMessageSize="50000000"
    }
  }

  sdk {
    peer.retry_wait_time = "5000"
  }
}
